plugins {
	id 'dev.architectury.loom' version '1.3.+'
	id 'io.github.juuxel.loom-vineflower' version '1.11.0'
	id 'maven-publish'

	// This dependency is only used to determine the state of the Git working tree so that build artifacts can be
	// more easily identified. TODO: Lazily load GrGit via a service only when builds are performed.
	id 'org.ajoberstar.grgit' version '5.0.0'

	id "me.modmuss50.mod-publish-plugin" version "0.3.4"
}

loom {
    silentMojangMappingsLicense()
	forge {
		mixinConfigs = [
			"embeddium.mixins.json"
		]
	}
	mixin.defaultRefmapName = "embeddium-refmap.json"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.mod_version}${getVersionMetadata()}+mc${project.minecraft_version}"
group = project.maven_group

sourceSets {
	compat {
		java {
			compileClasspath += main.compileClasspath
			compileClasspath += main.output
		}
	}

	main {
		java {
			runtimeClasspath += compat.output
		}
	}
}

loom {
	createRemapConfigurations(sourceSets.compat)
}

repositories {
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
    	}
  	}
}

def extraModsDir = "extra-mods-${project.minecraft_version}"

repositories {
	exclusiveContent {
		forRepository {
			flatDir {
				name "extra-mods"
				dir file(extraModsDir)
			}
		}
		filter {
			includeGroup "extra-mods"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
		
	modCompatCompileOnly "curse.maven:flywheel-486392:3535459"
	modCompatCompileOnly "curse.maven:codechickenlib-242818:3681973"

	modLocalRuntime "curse.maven:lazydfu-460819:3249059"

	// runtime remapping at home
	for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
		def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
		def versionSep = basename.lastIndexOf('-')
		assert versionSep != -1
		def artifactId = basename.substring(0, versionSep)
		def version = basename.substring(versionSep + 1)
		modRuntimeOnly("extra-mods:$artifactId:$version")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}


java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	from sourceSets.compat.output.classesDirs
	from sourceSets.compat.output.resourcesDir
}

def copyJarNameConsistent = tasks.register('copyJarNameConsistent', Copy) {
	from remapJar // shortcut for createJar.outputs.files
	into project.file("build/libs")
	rename { name -> "embeddium-latest.jar" }
}

def copyJarToBin = tasks.register('copyJarToBin', Copy) {
	from remapJar // shortcut for createJar.outputs.files
	into rootProject.file("bin")
	mustRunAfter "copyJarNameConsistent"
}

tasks.named("remapSourcesJar") {
	mustRunAfter "copyJarNameConsistent"
}

tasks.build.dependsOn(copyJarToBin, copyJarNameConsistent)

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(remapSourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		maven {
			url "file://${System.getenv("local_maven")}"
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	changelog = "https://github.com/embeddedt/embeddium/wiki/Changelog"
	type = STABLE
	modLoaders.add("forge")

	curseforge {
		projectId = "908741"
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}
	modrinth {
		projectId = "sk9rgfiA"
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}

	displayName = "[${project.minecraft_version}] Embeddium ${project.mod_version}"
}

def getVersionMetadata() {
	// CI builds only
	if (project.hasProperty("build.release")) {
		return "" // no tag whatsoever
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += ".dirty"
		}

		return "-git.${id}"
	}

	// No tracking information could be found about the build
	return "-unknown"
}
